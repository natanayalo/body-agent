name: CI
on:
  pull_request:
    branches: [master]
jobs:
  precommit:
    name: "ðŸ§¹ Pre-commit (all hooks)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-precommit-
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt
          pip install -r services/api/tests/requirements-test.txt
          pip install pre-commit
      - name: Run pre-commit (all files)
        run: pre-commit run --all-files
  all_tests:
    name: "ðŸ§ª Run Tests (Unit, Integration, E2E)"
    runs-on: ubuntu-latest
    needs: precommit
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt
          pip install -r services/api/tests/requirements-test.txt
          pip install -e services/api
      - name: Run Unit and Integration tests with coverage
        env:
          PYTHONPATH: services/api
        run: pytest --cov=services/api/app --cov-fail-under=95 services/api/tests/unit/ services/api/tests/integration/
      - name: Run Golden evaluation suite
        env:
          PYTHONPATH: services/api
        run: pytest --no-cov services/api/tests/golden/
      - name: Prepare env + data dir
        run: |
          cp .env.example .env
          echo "APP_ENV=ci" >> .env
          echo "ES_HOST=http://localhost:9200" >> .env
          echo "API_BASE_URL=http://localhost:8000" >> .env
          echo "APP_DATA_DIR=${{ github.workspace }}/data" >> .env
          echo "LLM_PROVIDER=none" >> .env
          echo "RISK_MODEL_ID=__stub__" >> .env
          echo "EMBEDDINGS_MODEL=__stub__" >> .env
          echo "INTENT_EXEMPLARS_PATH=${{ github.workspace }}/data/intent_exemplars.jsonl" >> .env
          mkdir -p data
          # Provide curated safety templates and exemplars in data/
          cp seeds/safety_templates.json data/safety_templates.json
          cp seeds/intent_exemplars.jsonl data/intent_exemplars.jsonl
      - name: "E2E: Start ES + seed (Makefile)"
        run: make e2e-local-up
      - name: "E2E: Start API (Makefile)"
        run: make e2e-local-api
      - name: "E2E: Wait for API (Makefile)"
        env:
          API_BASE_URL: http://localhost:8000
        run: make e2e-local-wait
      - name: "E2E: Run tests (Makefile)"
        env:
          API_BASE_URL: http://localhost:8000
        run: make e2e-local-test
      - name: Dump logs on failure
        if: failure()
        run: |
          echo "--- /tmp/api.log ---"
          (tail -n 500 /tmp/api.log || true)
          echo "--- docker compose logs (elasticsearch) ---"
          docker compose logs --no-color elasticsearch | tail -n 300 || true
      - name: Tear down
        if: always()
        run: docker compose down -v || true
