name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  precommit:
    name: "🧹 Pre-commit (all hooks)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-precommit-
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt
          pip install -r services/api/tests/requirements-test.txt
          pip install pre-commit
      - name: Run pre-commit (all files)
        run: pre-commit run --all-files
  unit_and_integration_tests:
    name: "🧪 Unit and Integration Tests"
    runs-on: ubuntu-latest
    needs: precommit
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt
          pip install -r services/api/tests/requirements-test.txt
          pip install -e services/api
      - name: Run Unit and Integration tests with coverage
        env:
          PYTHONPATH: services/api
          RISK_MODEL_ID: __stub__ # <— faster CI, no model download
        run: pytest --cov=services/api/app --cov-fail-under=90 services/api/tests/unit/ services/api/tests/integration/
  e2e_tests:
    name: "🌐 E2E Tests"
    runs-on: ubuntu-latest
    needs: unit_and_integration_tests
    steps:
      - uses: actions/checkout@v4
      - name: Create .env file
        run: cp .env.example .env
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Build & start stack (ES + API + seed)
        run: |
          docker compose up -d --build elasticsearch
          docker compose run --rm seed
          docker compose up -d --build api
      - name: Wait for API
        run: |
          for i in $(seq 1 60); do
            if curl -sf http://localhost:8000/healthz | grep -q '"ok":true'; then
              echo "API is ready"; break; fi
            echo "Waiting for API... ($i/60)"; sleep 2
          done
          curl -sf http://localhost:8000/healthz
      - name: E2E tests
        env:
          API_BASE_URL: http://localhost:8000
          RISK_MODEL_ID: __stub__
        run: pytest services/api/tests/e2e/
      - name: Dump logs on failure
        if: failure()
        run: |
          docker compose logs --no-color api elasticsearch | tail -n 500
      - name: Tear down
        if: always()
        run: docker compose down -v
